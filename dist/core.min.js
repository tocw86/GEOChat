var Helpers;
(function (Helpers_1) {
    var Helpers = /** @class */ (function () {
        function Helpers() {
        }
        Helpers.prototype.generateString = function () {
            return Math.random().toString(36).replace('0.', '');
        };
        /**
         * get random string
         *
         * @param len
         * @param charSet
         */
        Helpers.prototype.randomString = function (len, charSet) {
            charSet = charSet || 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
            var randomString = '';
            for (var i = 0; i < len; i++) {
                var randomPoz = Math.floor(Math.random() * charSet.length);
                randomString += charSet.substring(randomPoz, randomPoz + 1);
            }
            return randomString;
        };
        /**
         * Make blur on map
         * @returns void
         */
        Helpers.prototype.blurChat = function () {
            setTimeout(function () {
                document.getElementById("map").classList.add("blur");
            }, 500);
        };
        /**
         * Make click on enterk key
         * @returns void
         */
        Helpers.prototype.triggerEnterKey = function () {
            document.addEventListener("keypress", function onEvent(event) {
                if (event.key === "Enter") {
                    document.getElementById('send_button').click();
                }
            });
        };
        /**
         * Show container
         * @returns void
         */
        Helpers.prototype.showChatContainer = function () {
            document.getElementById("chat_container").style.display = "block";
        };
        /**
         * Chat input and button
         * @returns void
         */
        Helpers.prototype.activateHTML = function () {
            document.getElementById("chat_box").removeAttribute("disabled");
            document.getElementById("send_button").removeAttribute("disabled");
            this.blurChat();
            this.showChatContainer();
            this.triggerEnterKey();
        };
        /**
         * Add new message
         *
         * @param  {string} direction
         * @param  {string} message
         * @returns void
         */
        Helpers.prototype.makeBubble = function (direction, message) {
            var col = document.createElement("div");
            if (direction == 'you') {
                col.setAttribute('class', 'col-12 text-right');
            }
            else {
                col.setAttribute('class', 'col-12 text-left');
            }
            document.getElementById("chat_container_box").appendChild(col);
            var div = document.createElement("div");
            div.setAttribute('class', 'bubble-' + direction + ' ' + direction);
            col.appendChild(div);
            div.innerHTML = message;
        };
        return Helpers;
    }());
    Helpers_1.Helpers = Helpers;
})(Helpers || (Helpers = {}));

var Notify;
(function (Notify_1) {
    var Notify = /** @class */ (function () {
        function Notify() {
        }
        /**
         *
         * Make notify
         *
         * @param  {string} type
         * @param  {string} text
         * @param  {string} title
         * @returns void
         */
        Notify.prototype.makeNotify = function (type, text, title, position) {
            vNotify[type]({
                text: text,
                title: title,
                sticky: false,
                position: position || "topRight",
                autoHide: true,
                clickToHide: true,
                autoHideDelay: 3000,
            });
        };
        return Notify;
    }());
    Notify_1.Notify = Notify;
})(Notify || (Notify = {}));

var Cords;
(function (Cords_1) {
    var Cords = /** @class */ (function () {
        function Cords() {
            var rome = {
                coords: {
                    latitude: 41.890062,
                    longitude: 12.492549
                }
            };
            var versal = {
                coords: {
                    latitude: 48.804541,
                    longitude: 2.12013
                }
            };
            var everest = {
                coords: {
                    latitude: 28.002726,
                    longitude: 86.852628
                }
            };
            var stone = {
                coords: {
                    latitude: 51.178882,
                    longitude: -1.826226
                }
            };
            var whiteHouse = {
                coords: {
                    latitude: 38.897766,
                    longitude: -77.036504
                }
            };
            var reef = {
                coords: {
                    latitude: -23.442896,
                    longitude: 151.906584
                }
            };
            var kohala = {
                coords: {
                    latitude: 19.829778,
                    longitude: -155.990327
                }
            };
            var antarctica = {
                coords: {
                    latitude: -77.6361805,
                    longitude: 166.4173336
                }
            };
            var amazon = {
                coords: {
                    latitude: -3.142916,
                    longitude: -60.488234
                }
            };
            var mexico = {
                coords: {
                    latitude: 20.682522,
                    longitude: -88.56864
                }
            };
            var galapagos = {
                coords: {
                    latitude: -0.784807,
                    longitude: -91.094924
                }
            };
            var olsztyn = {
                coords: {
                    latitude: 53.77995,
                    longitude: 20.49416
                }
            };
            var egipt = {
                coords: {
                    latitude: 29.975715,
                    longitude: 31.137718
                }
            };
            this.places = new Array();
            this.places.push(rome);
            this.places.push(versal);
            this.places.push(everest);
            this.places.push(stone);
            this.places.push(whiteHouse);
            this.places.push(olsztyn);
            this.places.push(egipt);
        }
        /**
         * get spawn position
         * @returns any
         */
        Cords.prototype.getRandomPlace = function () {
            if (this.places.length > 0) {
                if (this.places.length == 7) {
                    var date = new Date();
                    return this.places[date.getDay()];
                }
                else {
                    return this.places[this.getRandomNumber(0, this.places.length - 1)];
                }
            }
            else {
                throw new Error;
            }
        };
        /**
       * Wybiera losową liczbę
       * @param  {number} min
       * @param  {number} max
       * @returns number
       */
        Cords.prototype.getRandomNumber = function (min, max) {
            return Math.floor(Math.random() * (max - min + 1)) + min;
        };
        ;
        return Cords;
    }());
    Cords_1.Cords = Cords;
})(Cords || (Cords = {}));

var Map;
(function (Map_1) {
    var Map = /** @class */ (function () {
        function Map() {
            this.token = 'pk.eyJ1IjoidG9jdzg2IiwiYSI6ImNqaHM0YTh2bzA3bDUzN254Mndyb2c4dm0ifQ.3eIb7F5PV-E6pBugRhs4cQ';
            this.cords = new Cords.Cords();
            this.defaultPosition = this.cords.getRandomPlace();
        }
        Map.prototype.getMap = function () {
            return this.map;
        };
        Map.prototype.getDefaultPosition = function () {
            return this.defaultPosition;
        };
        Map.prototype.initMap = function () {
            this.map = L.map('map').setView([this.defaultPosition.coords.latitude, this.defaultPosition.coords.longitude], 14);
            L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=' + this.token, {
                attribution: '',
                maxZoom: 16,
                id: "mapbox.streets-satellite",
                accessToken: this.token
            }).addTo(this.map);
        };
        Map.prototype.disableMap = function () {
            this.map.scrollWheelZoom.disable();
            this.map.dragging.disable();
            this.map.touchZoom.disable();
            this.map.doubleClickZoom.disable();
            this.map.boxZoom.disable();
            this.map.keyboard.disable();
            if (this.map.tap)
                this.map.tap.disable();
            this.map._handlers.forEach(function (handler) {
                handler.disable();
            });
        };
        return Map;
    }());
    Map_1.Map = Map;
})(Map || (Map = {}));

var User;
(function (User_1) {
    var User = /** @class */ (function () {
        function User(id, position, markerType) {
            this.moving = true;
            this.connected = true;
            this.enabled = true;
            this.user_id = id;
            this.enabled = true;
            this.lat = position.coords.latitude;
            this.lng = position.coords.longitude;
            this.markerType = markerType;
        }
        User.prototype.setLng = function (lng) {
            this.lng = lng;
        };
        User.prototype.setLat = function (lat) {
            this.lat = lat;
        };
        User.prototype.getUserId = function () {
            return this.user_id;
        };
        /**
         * Get user data in json format
         * @return string
         */
        User.prototype.getJsonFromUser = function () {
            return JSON.stringify({
                lat: this.getLat(),
                lng: this.getLng(),
                user_id: this.getUserId(),
                markerType: this.getMarkerType(),
                enabled: true
            });
        };
        User.prototype.isMoving = function () {
            return this.moving;
        };
        User.prototype.stopMoving = function () {
            this.moving = false;
        };
        User.prototype.startMoving = function () {
            this.moving = true;
        };
        User.prototype.isConnected = function () {
            return this.connected;
        };
        User.prototype.disconnect = function () {
            this.connected = false;
        };
        User.prototype.getMarker = function () {
            return this.marker;
        };
        User.prototype.setEnable = function () {
            this.enabled = true;
        };
        User.prototype.disable = function () {
            this.enabled = false;
        };
        User.prototype.getMarkerType = function () {
            return this.markerType;
        };
        User.prototype.setMarker = function (marker) {
            this.marker = marker;
        };
        User.prototype.getLat = function () {
            return this.lat;
        };
        User.prototype.getLng = function () {
            return this.lng;
        };
        return User;
    }());
    User_1.User = User;
})(User || (User = {}));

var Comunicator;
(function (Comunicator_1) {
    var Comunicator = /** @class */ (function () {
        function Comunicator() {
        }
        /**
         * Setter for this
         * @param myContext
         */
        Comunicator.prototype.setMyContext = function (myContext) {
            this.myContext = myContext;
        };
        /**
         * Friend setter
         * @param friendContext
         */
        Comunicator.prototype.setFriendContext = function (friendContext) {
            this.friendContext = friendContext;
        };
        /**
         * Set id
         * @param id
         */
        Comunicator.prototype.setFriendId = function (id) {
            this.friendId = id;
        };
        Comunicator.prototype.setFriendPublicKey = function (key) {
            this.friendPublicKey = key;
        };
        /**
         * Get id
         */
        Comunicator.prototype.getFriendContext = function () {
            return this.friendContext;
        };
        Comunicator.prototype.getFriendPublicKey = function () {
            return this.friendPublicKey;
        };
        Comunicator.prototype.getFriendId = function () {
            return this.friendId;
        };
        return Comunicator;
    }());
    Comunicator_1.Comunicator = Comunicator;
})(Comunicator || (Comunicator = {}));

var Init = /** @class */ (function () {
    /**
     * Start
     *
     * @param socket Socket.io
     */
    function Init(socket, markerType, auth, keys) {
        var _this = this;
        this.usersMarkers = [];
        this.icons = {
            red: L.icon({
                iconUrl: 'red-marker.svg',
                shadowUrl: 'marker-shadow.png',
                iconSize: [25, 41],
                iconAnchor: [0, 20],
                shadowAnchor: [0, 20],
            }),
            green: L.icon({
                iconUrl: 'green-marker.svg',
                shadowUrl: 'marker-shadow.png',
                iconSize: [25, 41],
                iconAnchor: [0, 20],
                shadowAnchor: [0, 20],
            }),
            blue: L.icon({
                iconUrl: 'blue-marker.svg',
                shadowUrl: 'marker-shadow.png',
                iconSize: [25, 41],
                iconAnchor: [0, 20],
                shadowAnchor: [0, 20],
            }),
            yellow: L.icon({
                iconUrl: 'yellow-marker.svg',
                shadowUrl: 'marker-shadow.png',
                iconSize: [25, 41],
                iconAnchor: [0, 20],
                shadowAnchor: [0, 20],
            }),
        };
        this.start = function () {
            _this.run(_this.map.getDefaultPosition());
        };
        /**
        * Run after get geo action
        */
        this.run = function (position) {
            _this.sendUserData();
            _this.mapEvents();
            _this.setUserMarker();
            _this.windowEvents();
            _this.triggerSocketEvents();
        };
        /**
         * Send user data to socket
         * @return void
         */
        this.sendUserData = function () {
            var data = _this.user.getJsonFromUser();
            _this.socket.emit('new_user', data);
        };
        /**
         * Factory for load users
         * @param lat
         * @param lng
         * @param user_id
         * @returns marker
         */
        this.markerFactory = function (lat, lng, user_id, markerType) {
            var self = _this;
            var icon = _this.icons[markerType];
            var marker = L.marker([lat, lng], { icon: icon }).addTo(_this.map.getMap()).on('click', function (event) {
                var $this = this;
                setTimeout(function () {
                    document.getElementById(user_id).addEventListener('click', function (e) {
                        self.startHandshake(user_id, $this);
                    });
                }, 50);
            });
            marker.bindPopup('<p>' + user_id + '<br/><button id="' + user_id + '">Handshake</button></p>');
            return marker;
        };
        /**
         * Begin handshake
         *
         * @param  {string} user_id
         * @param  {any} $this
         * @returns void
         */
        this.startHandshake = function (user_id, $this) {
            if (_this.user.isMoving()) {
                _this.communicator.setMyContext(_this);
                _this.communicator.setFriendContext($this);
                var friend_position = $this.getLatLng();
                var my_position = _this.user.getMarker().getLatLng();
                var distance = _this.calculateDistance(my_position.lat, friend_position.lat, my_position.lng, friend_position.lng);
                if (distance < 3000) {
                    //block moving
                    _this.user.stopMoving();
                    _this.communicator.setMyContext(_this);
                    _this.communicator.setFriendContext($this);
                    _this.communicator.setFriendId(user_id);
                    //comunicate to friend
                    _this.socket.emit('start_connect', JSON.stringify({ to: user_id, from: _this.user.getUserId(), gps: [[friend_position.lat, friend_position.lng], [my_position.lat, my_position.lng]], sender_pub_key: _this.auth.getPublicKey() }));
                }
                else {
                    alert("To far to make connection (" + distance + " m). Min. distance 3000m");
                }
            }
        };
        /**
         * Return distance
         * @param  {number} lat1
         * @param  {number} lat2
         * @param  {number} long1
         * @param  {number} long2
         */
        this.calculateDistance = function (lat1, lat2, long1, long2) {
            var p = 0.017453292519943295; // Math.PI / 180
            var c = Math.cos;
            var a = 0.5 - c((lat1 - lat2) * p) / 2 + c(lat2 * p) * c((lat1) * p) * (1 - c(((long1 - long2) * p))) / 2;
            var dis = (12742 * Math.asin(Math.sqrt(a))); // 2 * R; R = 6371 km
            return Math.round(dis * 1000); //distance m
        };
        /**
         * Check if user is connect
         */
        this.isConnected = function () {
            if (_this.user.isConnected() && _this.socket.connected) {
                return true;
            }
            else if (_this.user.isConnected() && !_this.socket.connected) {
                _this.notify.makeNotify("error", "Disconnected please refresh page", "Error");
                document.getElementById('status_notify').setAttribute('class', 'status_notify n_disconnect');
                _this.user.disconnect();
                _this.cleanAllMarkers();
                _this.map.disableMap();
                _this.disableUser();
                _this.changeStatusHtml();
                return false;
            }
            else if (!_this.user.isConnected() && !_this.socket.connected) {
                return false;
            }
        };
        /**
         * Trigger all socket events
         * @return void
         */
        this.triggerSocketEvents = function () {
            var self = _this;
            /**
             * Sender draw line
             */
            _this.socket.on('draw_line', function (flag) {
                if (flag) {
                    var friend_position = self.communicator.getFriendContext().getLatLng();
                    var my_position = self.user.getMarker().getLatLng();
                    self.sender_line = L.polyline([[friend_position.lat, friend_position.lng], [my_position.lat, my_position.lng]], {
                        color: 'red',
                        opacity: 1,
                        weight: 2
                    }).addTo(self.map.getMap());
                }
            });
            /**
             * Main decode
             */
            _this.socket.on('receive_message', function (data) {
                var connection_data = JSON.parse(data);
                if (connection_data.hasOwnProperty('to') && connection_data.hasOwnProperty('encrypted')) {
                    var message = self.auth.decrypt_received(connection_data.encrypted);
                    self.helper.makeBubble('me', message);
                    // self.notify.makeNotify('info', message, self.communicator.getFriendId());
                }
            });
            /**
             * Sender make line
             */
            _this.socket.on('make_line', function () {
                // self.notify.makeNotify('info', 'Private Room', 'Connected to user');
                document.getElementById('status_notify').setAttribute('class', 'status_notify n_connected');
                self.sender_line.setStyle({
                    color: 'green'
                });
                self.helper.activateHTML();
                self.map.getMap().closePopup();
                self.addSendButton(function () {
                    var text = document.getElementById("chat_box").value;
                    if (text.trim() != "" && text.length > 0) {
                        var connection_data = { encrypted: "", to: "" };
                        connection_data.encrypted = self.auth.encrypt(text, self.communicator.getFriendPublicKey());
                        connection_data.to = self.communicator.getFriendId();
                        self.socket.emit('send_message', JSON.stringify(connection_data));
                        document.getElementById("chat_box").value = null;
                        self.helper.makeBubble('you', text);
                    }
                    // self.notify.makeNotify('notify', text, self.user.getUserId(), "topRight");
                });
            });
            _this.socket.on('save_friend_key', function (friend_pub_key) {
                self.communicator.setFriendPublicKey(friend_pub_key);
                console.log('Zapisano klucz publiczny odbiorcy');
            });
            /**
             * Sender make button disconnect
             */
            _this.socket.on('make_button_disconnect', function () {
                self.makeButtonDisconnect(function () {
                    //console.log(self);
                });
            });
            /**
             * Sender remove line
             */
            _this.socket.on('remove_line', function () {
                // self.notify.makeNotify('error', 'Private Room', 'Friend refuse invitation');
                document.getElementById('status_notify').setAttribute('class', 'status_notify n_disconnect');
                self.map.getMap().removeLayer(self.sender_line);
                self.user.setEnable();
                self.user.startMoving();
            });
            /**
             * Friend handshake
             */
            _this.socket.on('handshake', function (data) {
                var connection_data = JSON.parse(data);
                if (connection_data.to == self.user.getUserId() && self.user.isMoving()) {
                    self.user.stopMoving();
                    if (confirm('Handshake from:' + connection_data.from)) {
                        self.user.disable();
                        self.communicator.setFriendPublicKey(connection_data.sender_pub_key);
                        self.communicator.setFriendId(connection_data.from);
                        console.log('Zapisano klucz publiczny nadawcy');
                        connection_data.friend_pub_key = self.auth.getPublicKey();
                        self.socket.emit('handshake_success', JSON.stringify(connection_data));
                        self.receiver_line = L.polyline(connection_data.gps, {
                            color: 'green',
                            opacity: 1,
                            weight: 2
                        }).addTo(self.map.getMap());
                        document.getElementById('status_notify').setAttribute('class', 'status_notify n_connected');
                        // self.notify.makeNotify('info', 'Private Room', 'Connected to user');
                        self.helper.activateHTML();
                        self.makeButtonDisconnect(function () {
                            // alert('odbiorca alert');
                        });
                        self.addSendButton(function () {
                            var text = document.getElementById("chat_box").value;
                            if (text.trim() != "" && text.length > 0) {
                                var _connection_data = { encrypted: self.auth.encrypt(text, self.communicator.getFriendPublicKey()), to: connection_data.from };
                                self.socket.emit('send_message', JSON.stringify(_connection_data));
                                document.getElementById("chat_box").value = null;
                                // self.notify.makeNotify('notify', text, self.user.getUserId(), "topRight");
                                self.helper.makeBubble('you', text);
                            }
                        });
                        return true;
                    }
                    else {
                        self.user.startMoving();
                        self.user.setEnable();
                        self.socket.emit('handshake_failed', data);
                        self.notify.makeNotify('error', 'Private Room', 'Refused invitation');
                        document.getElementById('status_notify').setAttribute('class', 'status_notify n_disconnect');
                        return false;
                    }
                }
            });
            /**
             * Load all users
             */
            _this.socket.on('load_users', function (usersData) {
                var data = JSON.parse(usersData);
                for (var i = 0; i < data.length; i++) {
                    if (data[i].user_id != self.user.getUserId() && data[i].enabled) {
                        var marker = self.markerFactory(data[i].lat, data[i].lng, data[i].user_id, data[i].markerType);
                        self.usersMarkers.push({
                            user_id: data[i].user_id,
                            marker: marker,
                            enabled: data[i].enabled
                        });
                    }
                }
            });
            /**
            * Load logged in user
            */
            _this.socket.on('load_user', function (usersData) {
                var data = JSON.parse(usersData);
                if (data.user_id != self.user.getUserId()) {
                    var marker = self.markerFactory(data.lat, data.lng, data.user_id, data.markerType);
                    self.usersMarkers.push({
                        user_id: data.user_id,
                        marker: marker,
                        enabled: data.enabled
                    });
                }
            });
            /**
             * Event after user move marker
             */
            _this.socket.on('move_marker', function (usersData) {
                var data = JSON.parse(usersData);
                for (var i = 0; i < self.usersMarkers.length; i++) {
                    if (data.user_id == self.usersMarkers[i].user_id) {
                        self.usersMarkers[i].marker.setLatLng({
                            lat: data.lat,
                            lng: data.lng
                        });
                    }
                }
            });
            /**
             * Remove user marker
             */
            _this.socket.on('remove_marker', function (user_id) {
                for (var i = 0; i < self.usersMarkers.length; i++) {
                    if (user_id == self.usersMarkers[i].user_id) {
                        self.usersMarkers[i].marker.remove();
                    }
                }
            });
        };
        this.cleanAllMarkers = function () {
            for (var i = 0; i < _this.usersMarkers.length; i++) {
                _this.usersMarkers[i].marker.remove();
            }
            _this.user.getMarker().remove();
        };
        this.disableUser = function () {
            _this.user.disable();
            _this.user.stopMoving();
        };
        this.changeStatusHtml = function () {
            document.getElementById("status_toolbar").innerHTML = "  <i class=\"fas fa-ban danger\"></i>&nbsp;disconnected";
        };
        /**
         * Add send button
         * @param  {()=>void} callback
         * @returns void
         */
        this.addSendButton = function (callback) {
            var button = document.getElementById('send_button');
            button.addEventListener("click", function () {
                callback();
            });
        };
        /**
         * Set user marker
         * @return void
         */
        this.setUserMarker = function () {
            var item = _this.icons[_this.user.getMarkerType()];
            _this.user.setMarker(L.marker([_this.user.getLat(), _this.user.getLng()], { icon: item }).addTo(_this.map.getMap()));
        };
        /**
         * Trigger map events
         * @return void
         */
        this.mapEvents = function () {
            var self = _this;
            _this.map.getMap().on('click', function (event) {
                self.isConnected();
                if (typeof self.user.getMarker() != 'undefined' && self.user.isMoving() && self.isConnected()) {
                    self.user.setLat(event.latlng.lat);
                    self.user.setLng(event.latlng.lng);
                    self.user.getMarker().setLatLng(event.latlng);
                    self.updateUserData();
                }
            });
        };
        /**
         * Send update data to socket
         */
        this.updateUserData = function () {
            _this.socket.emit('update_user', _this.user.getJsonFromUser());
        };
        this.helper = new Helpers.Helpers();
        this.socket = socket;
        this.communicator = new Comunicator.Comunicator();
        this.notify = new Notify.Notify();
        this.map = new Map.Map();
        this.map.initMap();
        this.user = new User.User(socket.id, this.map.getDefaultPosition(), markerType);
        this.auth = new auth(socket.id, keys);
    }
    /**
     * Trigger window events
     * @return void
     */
    Init.prototype.windowEvents = function () {
        var self = this;
        window.addEventListener('beforeunload', function (e) {
            //self.socket.emit('remove_user', self.user_id);
        });
    };
    /**
     * Add html button
     * @return void
     */
    Init.prototype.makeButtonDisconnect = function (callback) {
        // var div = document.createElement('div');
        // div.setAttribute("class", "d-b");
        // var container = document.getElementById("console");
        // container.appendChild(div);
        // var button = document.createElement('button');
        // button.innerHTML = "Disconnect";
        // div.appendChild(button);
        // button.addEventListener("click", function () {
        //     //callback();
        //     window.location.href = "/";
        // });
    };
    return Init;
}());

$(window).on('load', function () {
    var $io = io;
    io = null;
    var _auth = null;

    function notify(type, text, title) {
        vNotify[type]({
            text: text,
            title: title,
            sticky: true,

        });
    }
    var myWorker = new Worker('worker.js');
    myWorker.addEventListener("message", function (oEvent) {
        var keypair = oEvent.data;
        console.log('SSH key generated!');
        document.getElementById('progress_info').innerHTML = "Wybierz swój marker";
        document.getElementById('markers').style.opacity = 1;
        var _auth = auth;
        auth = undefined;
        $('.col-6').click(function () {
            var marker = $(this).data('marker');
            if (marker != null && marker != '' && ['red', 'green', 'blue', 'yellow'].indexOf(marker) > -1) {
                var socket = $io.connect('/', {
                    secure: true,
                    rejectUnauthorized: false
                });

                socket.on('console', function (id) {
                    if (id) {
                        document.getElementById('status_notify').setAttribute('class', 'status_notify n_success');
                        // notify('success', 'Connected', 'Status');
                    } else {
                        document.getElementById('status_notify').setAttribute('class', 'status_notify n_disconnect');
                        // notify('error', 'Disconnected', 'Status');
                    }
                });
                socket.on('connect', function () {

                    var elt = new Init(socket, marker, _auth, keypair);
                    elt.start();
                    $('#map').show();
                    $('#main-container').hide();

                });
            } else {
                document.getElementById('status_notify').setAttribute('class', 'status_notify n_disconnect');
            }
        });



    }, false);
    myWorker.postMessage("sad");


});